server.port=8090

## default connection pool
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5

## PostgreSQL
# POSTGRES_HOST defaults to localhost for local devlopment and is replaced in docker
spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST:localhost}:5432/calendar
# POSTGRES_USER and POSTGRES_PASSWORD come from .env and are replaced with docker env variables
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect

#show sql statement
logging.level.org.hibernate.SQL=debug

#spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

#show sql values
logging.level.org.hibernate.type.descriptor.sql=trace

#drop n create table again, good for testing, comment this in production
spring.jpa.hibernate.ddl-auto=update

server.servlet.context-path=/calendaring-service

# Read .env file
spring.config.import=optional:file:.env[.properties]

# Your Cronofy Application credentials
cronofy.client.id=${CRONOFY_CLIENT_ID}
cronofy.client.secret=${CRONOFY_CLIENT_SECRET}
cronofy.redirect.uri=${CRONOFY_REDIRECT_URI}
cronofy.api.baseuri=${CRONOFY_API_BASE_URL}
cronofy.app.baseuri=${CRONOFY_APP_BASE_URL}


google.client.id=${GOOGLE_CLIENT_ID}


